#!/usr/bin/perl -w

# Copyright 2000-2003 KnowNow, Inc.  All Rights Reserved.
#
# @KNOWNOW_LICENSE_START@
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the
# distribution.
# 
# 3. The name "KnowNow" is a trademark of KnowNow, Inc. and may not
# be used to endorse or promote any product without prior written
# permission from KnowNow, Inc.
# 
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL KNOWNOW, INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# @KNOWNOW_LICENSE_END@
#
# $Id: weblogs.plx,v 1.1 2003/05/12 23:51:23 ifindkarma Exp $

# To run the weblogs.com feed:
#   weblogs.plx -url {url} [-log {log}]

# Where:
#   url is the mod_pubsub instance where new stories are POSTed
#   log is the log file

# Example:
#   weblogs.plx -url http://www.mod-pubsub.org/kn -log weblogs.log

# weblogs.plx publishes to the topic /kn/what/apps/blogchatter/weblogs.com

# This program sends structured data in the headers:
#    blog_name: {weblogname}
#    blog_url: {weblogurl}
#    kn_payload: {weblogurl}
#    kn_expires: +30
#    kn_time_t: {time}

# Here is the format of http://www.weblogs.com/shortChanges.xml
# 
# <?xml version="1.0" ?> 
# <!-- XML generated by UserLand Frontier v9.0 on 5/12/2003; 12:36:02 PM --> 
# <weblogUpdates version="1" updated="Mon, 12 May 2003 19:36:02 GMT" count="996788">
#   <weblog name="Uefa23's blog @ PersianBlog" url="http://uefa23.persianblog.com" when="9" /> 
#   <weblog name="BARZI.NET: y a personne de s&#233;rieux ici!" url="http://www.barzi.net/index.php" when="13" /> 
#   <weblog name="mrbarrett.com" url="http://www.mrbarrett.com/" when="26" /> 
#   ...
#   <weblog name="Anti-Colonial Agitator" url="http://diarmidlogan.blogspot.com/" when="298" /> 
# </weblogUpdates>

# This program GETs http://www.weblogs.com/shortChanges.xml once.
# Run it as a cron job for best results...

use strict;
use LWP::Simple;
use LWP::UserAgent;
use RSSLite;
use HTTP::Request::Common;
use IO::Handle;
use Time::localtime;

my %params = @ARGV;

my $version = '$Id: ';
my $postURL = $params{-url} or die "No URL specified with -url.\n";
my $logfile = $params{-log} || "weblogs.log";

print "Weblogs.com Sensor $version \n\n";
open(LOG, ">> $logfile") or die "Couldn't open $logfile for writing: $!\n";
LOG->autoflush(1);
print "Appending to log: $logfile\n";
log_msg("\n\nWeblogs.com Sensor $version \n");
print "Using http://www.weblogs.com/shortChanges.xml \n";
log_msg("Using http://www.weblogs.com/shortChanges.xml \n");

# Hits weblogs.com once.  Run as a cron job.

my $ua = new LWP::UserAgent;
my $feedURL = "http://www.weblogs.com/shortChanges.xml";
my $topic = "/what/apps/blogchatter/weblogs.com";
process_feed($feedURL, $topic, $ua);

# Retrieve the given information.

sub process_feed
{
    my ($feedURL, $topic, $ua) = @_;
    if ($feedURL =~ /\s/)
    {
        my $msg = "Got URL containing whitespace: '$feedURL', quitting";
        log_msg($msg);
        die $msg;
    }

    log_msg("Retrieving channel @ $feedURL, posting to $topic");
    my $dest = "$postURL/$topic";

    my $content = get($feedURL) or return;
    my %result;

    # FIXME: This doesn't quite work.
    eval { parseXML(\%result, \$content); };

    if ($@)
    {
        log_msg("Failed to parse $feedURL:\n$content");
        return;
    }

    log_msg("Processing channel \"$result{'title'}\"");

    my $item;
    foreach $item (@{$result{'items'}}) 
    {
        next if not defined ($item->{url});
        log_msg("$item->{url}");
	$item->{url} =~ s|^([a-zA-Z0-9_]+://[^/]+/)/+|$1|;
        my $story = build_event($result{name}, $item);
        my $result = $ua->request(POST $dest, [ %$story ]);
        log_msg("Failed to post to $dest: " . $result->as_string)
            if $result->code !~ /^2/;
    }
}

# Return the event.

sub build_event
{
    my ($source, $item) = @_;

    for my $key (keys %$item)
    {
        $item->{$key} =~ s/&lt;/</g;
        $item->{$key} =~ s/&gt;/>/g;
        $item->{$key} =~ s/&amp;/&/g;
    }

    # FIXME: This doesn't quite work.

    return {
        ('kn_id' => unpack("%C*", $source.($item->{url} || "").($item->{name} || "") )),
        ($item->{name} ? ('blog_name' => $item->{name}) : ()),
        ($item->{url} ? ('blog_url' => $item->{url}) : ()),
        ($item->{url} ? ('kn_payload' => $item->{url}) : ()),
        ('content-type' => 'text/plain'),
        ('kn_time_t' => '0'), # FIXME
        ('kn_expires' => '+30'),
        ('displayname' => 'Weblogs.Com')
    };
}

# Log time and message.

sub log_msg 
{
    my ($s) = @_;

    # The current time formatted like: 2000-09-01 15:56:21.

    my $tm = localtime;
    my $now = sprintf("%04d-%02d-%02d %02d:%02d:%02d", $tm->year+1900, 
             ($tm->mon)+1, $tm->mday, $tm->hour, $tm->min, $tm->sec);

    print LOG $now . ": $s\n";
}

# End of weblogs.plx
